{
  "hash": "f82553f878311ab21272abb8fa2ba33a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method\"\ndate: \"December 8, 2022\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  eval: false\n  warning: false\n  message: false\n  freeze: true\n  fig-retine: 3\n---\n\n## Overview\n\n**Geographically weighted regression (GWR)** is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build [hedonic pricing](https://www.investopedia.com/terms/h/hedonicpricing.asp) models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational.\n\n## The Data\n\nTwo data sets will be used in this model building exercise, they are:\n\n-   URA Master Plan subzone boundary in shapefile format (i.e. *MP14_SUBZONE_WEB_PL*)\n-   condo_resale_2015 in csv format (i.e. *condo_resale_2015.csv*)\n\n## Getting Started\n\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\n\nThe R packages needed for this exercise are as follows:\n\n-   R package for building OLS and performing diagnostics tests\n    -   [**olsrr**](https://olsrr.rsquaredacademy.com/index.html)\n-   R package for calibrating geographical weighted family of models\n    -   [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/index.html)\n-   R package for multivariate data visualisation and analysis\n    -   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html)\n-   Spatial data handling\n    -   **sf**\n-   Attribute data handling\n    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**\n-   Choropleth mapping\n    -   **tmap**\n\nThe code chunks below installs and launches these R packages into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n```\n:::\n\n\n## A short note about GWmodel\n\n[**GWmodel**](https://www.jstatsoft.org/article/view/v063i17) package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis.\n\n## Geospatial Data Wrangling\n\n### Importing geospatial data\n\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014's planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\n\nThe code chunk below is used to import *MP_SUBZONE_WEB_PL* shapefile by using `st_read()` of **sf** packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"chap13/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n:::\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called *mpsz* and it is a simple feature object. The geometry type is *multipolygon*. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n### Updating CRS information\n\nThe code chunk below updates the newly imported *mpsz* with the correct ESPG code (i.e. 3414)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_svy21 <- st_transform(mpsz, 3414)\n```\n:::\n\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed *mpsz_svy21* by using `st_crs()` of **sf** package.\n\nThe code chunk below will be used to varify the newly transformed *mpsz_svy21*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz_svy21)\n```\n:::\n\n\nNotice that the EPSG: is indicated as *3414* now.\n\nNext, you will reveal the extent of *mpsz_svy21* by using `st_bbox()` of sf package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_bbox(mpsz_svy21) #view extent\n```\n:::\n\n\n## Aspatial Data Wrangling\n\n### Importing the aspatial data\n\nThe *condo_resale_2015* is in csv file format. The codes chunk below uses `read_csv()` function of **readr** package to import *condo_resale_2015* into R as a tibble data frame called *condo_resale*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale = read_csv(\"chap13/data/aspatial/Condo_resale_2015.csv\")\n```\n:::\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe codes chunks below uses `glimpse()` to display the data structure of will do the job.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(condo_resale)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n```\n:::\n\n\nNext, `summary()` of base R is used to display the summary statistics of *cond_resale* tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(condo_resale)\n```\n:::\n\n\n### Converting aspatial data frame into a sf object\n\nCurrently, the *condo_resale* tibble data frame is aspatial. We will convert it to a **sf** object. The code chunk below converts condo_resale data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n```\n:::\n\n\nNotice that `st_transform()` of **sf** package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\n\nNext, `head()` is used to list the content of *condo_resale.sf* object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(condo_resale.sf)\n```\n:::\n\n\nNotice that the output is in point feature data frame.\n\n## Exploratory Data Analysis (EDA)\n\nIn the section, you will learn how to use statistical graphics functions of **ggplot2** package to perform EDA.\n\n### EDA using statistical graphics\n\nWe can plot the distribution of *SELLING_PRICE* by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n```\n:::\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\n\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called *LOG_SELLING_PRICE* by using a log transformation on the variable *SELLING_PRICE*. It is performed using `mutate()` of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n```\n:::\n\n\nNow, you can plot the *LOG_SELLING_PRICE* using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n```\n:::\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n### Multiple Histogram Plots distribution of variables\n\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using `ggarrange()` of [**ggpubr**](https://cran.r-project.org/web/packages/ggpubr/index.html) package.\n\nThe code chunk below is used to create 12 histograms. Then, `ggarrange()` is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n```\n:::\n\n\n### Drawing Statistical Point Map\n\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using **tmap** package.\n\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n```\n:::\n\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n:::\n\n\nNotice that [`tm_dots()`](https://www.rdocumentation.org/packages/tmap/versions/2.2/topics/tm_symbols) is used instead of `tm_bubbles()`.\n\n`set.zoom.limits` argument of `tm_view()` sets the minimum and maximum zoom level to 11 and 14 respectively.\n\nBefore moving on to the next section, the code below will be used to turn R display into `plot` mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\n## Hedonic Pricing Modelling in R\n\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using [`lm()`](https://www.rdocumentation.org/packages/stats/versions/3.5.2/topics/lm) of R base.\n\n### Simple Linear Regression Method\n\nFirst, we will build a simple linear regression model by using *SELLING_PRICE* as the dependent variable and *AREA_SQM* as the independent variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n```\n:::\n\n\n`lm()` returns an object of class \"lm\" or for multiple responses of class c(\"mlm\", \"lm\").\n\nThe functions `summary()` and `anova()` can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by `lm`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(condo.slr)\n```\n:::\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n\n```         \n      *y = -258121.1 + 14719x1*\n```\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\n\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of *SELLING_PRICE*.\n\nThe **Coefficients:** section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\n\nTo visualise the best fit curve on a scatterplot, we can incorporate `lm()` as a method function in ggplot's geometry as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n:::\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n### Multiple Linear Regression Method\n\n#### Visualising the relationships of the independent variables\n\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as **multicollinearity** in statistics.\n\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the `pairs()` of R, there are many packages support the display of a correlation matrix. In this section, the [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package will be used.\n\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in *condo_resale* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n```\n:::\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named \"AOE\", \"FPC\", \"hclust\", \"alphabet\". In the code chunk above, AOE order is used. It orders the variables by using the *angular order of the eigenvectors* method suggested by [Michael Friendly](https://www.datavis.ca/papers/corrgram.pdf).\n\nFrom the scatterplot matrix, it is clear that ***Freehold*** is highly correlated to ***LEASE_99YEAR***. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, ***LEASE_99YEAR*** is excluded in the subsequent model building.\n\n### Building a hedonic pricing model using multiple linear regression method\n\nThe code chunk below using `lm()` to calibrate the multiple linear regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE\t+ \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET\t+ PROX_KINDERGARTEN\t+ \n                  PROX_MRT\t+ PROX_PARK\t+ PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL\t+ PROX_SUPERMARKET + \n                  PROX_BUS_STOP\t+ NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n```\n:::\n\n\n### Preparing Publication Quality Table: olsrr method\n\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\n\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE\t+\n                   PROX_URA_GROWTH_AREA + PROX_MRT\t+ PROX_PARK\t+ \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL\t+ PROX_BUS_STOP\t+ \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n```\n:::\n\n\n### Preparing Publication Quality Table: gtsummary method\n\nThe [**gtsummary**](https://www.danieldsjoberg.com/gtsummary/index.html) package provides an elegant and flexible way to create publication-ready summary tables in R.\n\nIn the code chunk below, [`tbl_regression()`](https://www.danieldsjoberg.com/gtsummary/reference/tbl_regression.html) is used to create a well formatted regression report.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_regression(condo.mlr1, intercept = TRUE)\n```\n:::\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using [`add_glance_table()`](https://www.danieldsjoberg.com/gtsummary/reference/add_glance.html) or adding as a table source note by using [`add_glance_source_note()`](https://www.danieldsjoberg.com/gtsummary/reference/add_glance.html) as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n```\n:::\n\n\nFor more customisation options, refer to [Tutorial: tbl_regression](https://www.danieldsjoberg.com/gtsummary/articles/tbl_regression.html)\n\n#### Checking for multicolinearity\n\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called [**olsrr**](https://olsrr.rsquaredacademy.com/). It provides a collection of very useful methods for building better multiple linear regression models:\n\n-   comprehensive regression output\n-   residual diagnostics\n-   measures of influence\n-   heteroskedasticity tests\n-   collinearity diagnostics\n-   model fit assessment\n-   variable contribution assessment\n-   variable selection procedures\n\nIn the code chunk below, the [`ols_vif_tol()`](https://olsrr.rsquaredacademy.com/reference/ols_coll_diag.html) of **olsrr** package is used to test if there are sign of multicollinearity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_vif_tol(condo.mlr1)\n```\n:::\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n#### Test for Non-Linearity\n\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\n\nIn the code chunk below, the [`ols_plot_resid_fit()`](https://olsrr.rsquaredacademy.com/reference/ols_plot_resid_fit.html) of **olsrr** package is used to perform linearity assumption test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_plot_resid_fit(condo.mlr1)\n```\n:::\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n#### Test for Normality Assumption\n\nLastly, the code chunk below uses [`ols_plot_resid_hist()`](https://olsrr.rsquaredacademy.com/reference/ols_plot_resid_hist.html) of *olsrr* package to perform normality assumption test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_plot_resid_hist(condo.mlr1)\n```\n:::\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\n\nIf you prefer formal statistical test methods, the [`ols_test_normality()`](https://olsrr.rsquaredacademy.com/reference/ols_test_normality.html) of **olsrr** package can be used as shown in the code chun below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_test_normality(condo.mlr1)\n```\n:::\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n#### Testing for Spatial Autocorrelation\n\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\n\nIn order to perform spatial autocorrelation test, we need to convert *condo_resale.sf* from sf data frame into a **SpatialPointsDataFrame**.\n\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n```\n:::\n\n\nNext, we will join the newly created data frame with *condo_resale.sf* object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n```\n:::\n\n\nNext, we will convert *condo_resale.res.sf* from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\n\nThe code chunk below will be used to perform the data conversion process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n```\n:::\n\n\nNext, we will use **tmap** package to display the distribution of the residuals on an interactive map.\n\nThe code churn below will turn on the interactive mode of tmap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n```\n:::\n\n\nThe code chunks below is used to create an interactive point symbol map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n:::\n\n\nRemember to switch back to \"plot\" mode before continue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\n\nTo proof that our observation is indeed true, the Moran's I test will be performed\n\nFirst, we will compute the distance-based weight matrix by using [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) function of **spdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n```\n:::\n\n\nNext, [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n```\n:::\n\n\nNext, [`lm.morantest()`](https://r-spatial.github.io/spdep/reference/lm.morantest.html) of **spdep** package will be used to perform Moran's I test for residual spatial autocorrelation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.morantest(condo.mlr1, nb_lw)\n```\n:::\n\n\nThe Global Moran's I test for residual spatial autocorrelation shows that it's p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\n\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution.\n\n## Building Hedonic Pricing Models using GWmodel\n\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n### Building Fixed Bandwidth GWR Model\n\n#### Computing fixed bandwith\n\nIn the code chunk below `bw.gwr()` of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument ***adaptive*** is set to **FALSE** indicates that we are interested to compute the fixed bandwidth.\n\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using ***approach*** argeement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE\t+ PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE\t+ PROX_URA_GROWTH_AREA + \n                     PROX_MRT\t+ PROX_PARK\t+ PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL\t+ PROX_BUS_STOP\t+ NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n```\n:::\n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. (Quiz: Do you know why it is in metre?)\n\n#### GWModel method - fixed bandwith\n\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE\t+ PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE\t+ PROX_URA_GROWTH_AREA + \n                         PROX_MRT\t+ PROX_PARK\t+ PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL\t+ PROX_BUS_STOP\t+ NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n```\n:::\n\n\nThe output is saved in a list of class \"gwrm\". The code below can be used to display the model output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.fixed\n```\n:::\n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n### Building Adaptive Bandwidth GWR Model\n\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n#### Computing the adaptive bandwidth\n\nSimilar to the earlier section, we will first use `bw.gwr()` to determine the recommended data point to use.\n\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the `adaptive` argument has changed to **TRUE**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE\t+ \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE\t+ \n                        PROX_URA_GROWTH_AREA + PROX_MRT\t+ PROX_PARK\t+ \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL\t+ PROX_BUS_STOP\t+ \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n```\n:::\n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n#### Constructing the adaptive bandwidth gwr model\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT\t+ PROX_PARK\t+ \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n```\n:::\n\n\nThe code below can be used to display the model output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive\n```\n:::\n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n### Visualising GWR Output\n\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\n-   Condition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\n\n-   Local R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\n\n-   Predicted: these are the estimated (or fitted) y values 3. computed by GWR.\n\n-   Residuals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\n\n-   Coefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its \"data\" slot in an object called **SDF** of the output list.\n\n### Converting SDF into *sf* data.frame\n\nTo visualise the fields in **SDF**, we need to first covert it into **sf** data.frame by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n```\n:::\n\n\nNext, `glimpse()` is used to display the content of *condo_resale.sf.adaptive* sf data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(condo_resale.sf.adaptive)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gwr.adaptive$SDF$yhat)\n```\n:::\n\n\n### Visualising local R2\n\nThe code chunks below is used to create an interactive point symbol map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\n### Visualising coefficient estimates\n\nThe code chunks below is used to create an interactive point symbol map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\n#### By URA Plannign Region\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n:::\n\n\n## Reference\n\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) \"GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models\". *Journal of Statistical Software*, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\n\nLu B, Harris P, Charlton M, Brunsdon C (2014) \"The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models\". *Geo-spatial Information Science* 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}